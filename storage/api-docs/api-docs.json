{
    "openapi": "3.0.0",
    "info": {
        "title": "Booking table application",
        "version": "1.0.0"
    },
    "paths": {
        "/api/get_info": {
            "get": {
                "tags": [
                    "app info"
                ],
                "summary": "App info",
                "description": "Getting all infos",
                "operationId": "appInfoGetInfo",
                "responses": {
                    "200": {
                        "description": "Success getting a list of infos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AppInfo"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Registration",
                "description": "Registration of a new user by first_name, second_name, email, password",
                "operationId": "registration",
                "requestBody": {
                    "description": "Pass data to register a new user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "second_name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Jack"
                                    },
                                    "second_name": {
                                        "type": "string",
                                        "example": "Smith"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success registration a new user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "first_name": {
                                            "type": "string",
                                            "example": "Jack"
                                        },
                                        "second_name": {
                                            "type": "string",
                                            "example": "Smith"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "user1@mail.com"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "first_name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The first name field is required."
                                                    }
                                                },
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email has already been taken."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Login",
                "description": "Login of the user by email, password",
                "operationId": "login",
                "requestBody": {
                    "description": "Pass data to login the user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success login the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string",
                                            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5MzMxOTY3My0yNTkxLTRlNGMtOWUwMy02MzRlMDYzNWUzMDMiLCJqdGkiOiI5MjUzMTU1YjY0MWIwMWY3NDEwMGNmMjhhOGIxZmU2NzNhZjhjMGExZDM1MGFiNDdmN2M3ZTRlNTNjNDUxYmIyMDUzMTAyNDRmNWExZjdmYyIsImlhdCI6MTYxODQ4MDgzOS4zNDY0ODYsIm5iZiI6MTYxODQ4MDgzOS4zNDY0OTgsImV4cCI6MTY1MDAxNjgzOS4zMzAxOTEsInN1YiI6IjEiLCJzY29wZXMiOltdfQ.FoOSs7tl3hfN1KWG40WexLGG67qsZ6SYzVUX_zAAu5H-AaxNv-p-dmY8Q6zh2HnHwPbVKrjTXLVM28nqXSanOreP2Tpfwq_LbrjAYLuEpzrY17QMddtbQ3iXh7M7OX0AyRFcw6Z4_SZVwc-sfUK-rcTyIo9e7XHtCKBsE4yaVmFgHX933s6ltmZzk5bzLP993WrMOlvuqxFHcVV6STQzuFb4QC7qkw3Pv62p-E7WTaoHbWhR5EM5FsxXSDai_zjHVmRFpIdPmrfE9eilcrTYQP-OcsbR37rKdYTdoHnaTxO3P6KVDehSsI1TU0Uok6K_8liTZU32cxV8s1nOUuM74z_d-k-chLbcm1-hKAVn5SyAKWrXbs2AI8WgoWV4msZI_VQX0lp9C8Nx12zhWDOe4AGff8gJAB7OkQIT4FMt1UIdc_04lASbU8YJV2Oht-DOwnk-G71_uUdc4REgkBf29IggdQojuXLvxFzvF3ORd3rzPQ9xGGlrV5h2UBgZd039qnqRrmZJah36oC0OgHaRGqzmQzenTAeKxyBM7zH5tsj5nwSU7cUvHq2v15XLqd7JHKuK2dPa0AJGCwUcejSs6WSTjUxbuq8Zfc76WR-6G0pv7gnvMlD0CgLR4o6sgXRtVO74Q2nGmxV49cnGc45zCI0Q_CifRD2cagZyE0USMdM"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/forgot": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Forgot password",
                "description": "Sending password recovery email",
                "operationId": "forgot",
                "requestBody": {
                    "description": "Pass data to send a password recovery email",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success sending password recovery email the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "user1@mail.com"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/reset": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Reset password",
                "description": "Changing the password if there is a token",
                "operationId": "reset",
                "responses": {
                    "200": {
                        "description": "Success changing the password if there is a token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success change password"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Logout",
                "description": "Logging out a user from an account",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "Success logging out a user from an account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logout successful"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "categories"
                ],
                "summary": "Category info",
                "description": "Getting a list of all categories",
                "operationId": "categoriesIndex",
                "responses": {
                    "200": {
                        "description": "Success getting a list of all categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "categories"
                ],
                "summary": "Adds a new category",
                "description": "Adds a new category",
                "operationId": "categoryStore",
                "requestBody": {
                    "description": "Pass data to add a new category",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Coffee"
                                    },
                                    "image": {
                                        "type": "file",
                                        "maxLength": 255,
                                        "example": "(file path)"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success creating category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/categories/{id}": {
            "put": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates the category",
                "description": "Updates the category",
                "operationId": "categoriesUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to add a new category",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Coffee"
                                    },
                                    "image": {
                                        "type": "file",
                                        "maxLength": 255,
                                        "example": "(file path)"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success updating category information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "categories"
                ],
                "summary": "Deleting category",
                "description": "Deleting category",
                "operationId": "categoriesDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success deleting category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category is deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/categories/{id}/uploadImage": {
            "post": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates the category picture",
                "description": "Updates the category picture",
                "operationId": "categoryUploadImage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to add a new category image",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "image": {
                                        "type": "file",
                                        "maxLength": 255,
                                        "example": "(file path)"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "image_url": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "storage/CategoryImages/236095676.png"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/comments": {
            "get": {
                "tags": [
                    "comments"
                ],
                "summary": "Comments info",
                "description": "Getting a list of all comments",
                "operationId": "commentsIndex",
                "responses": {
                    "200": {
                        "description": "Success getting a list of all comments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Comment"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "comments"
                ],
                "summary": "Add a new comment",
                "description": "Adding a new comment",
                "operationId": "commentsStore",
                "requestBody": {
                    "description": "Pass data to add a new comment",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description",
                                    "review_id"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "OMG"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "It is an amazing place in my hometown."
                                    },
                                    "review_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "example": "OMG"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "It is an amazing place in my hometown."
                                        },
                                        "review_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "review_id": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The review id field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/comments/{id}": {
            "get": {
                "tags": [
                    "comments"
                ],
                "summary": "Show user comments",
                "description": "Showing a new comment",
                "operationId": "commentsShow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of comment",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success showing comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "OMG"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "It is an amazing place in my hometown."
                                        },
                                        "review_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Comment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "comments"
                ],
                "summary": "Update comment",
                "description": "Updating comment information",
                "operationId": "commentsUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of comment",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to update comment information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "OMG"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "It is an amazing place in my hometown."
                                    },
                                    "review_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success updating comment information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "OMG"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "It is an amazing place in my hometown."
                                        },
                                        "review_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Comment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "comments"
                ],
                "summary": "Delete comment",
                "description": "Deleting comment",
                "operationId": "commentsDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of comment",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success deleting comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Comment is deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Comment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/favourites": {
            "get": {
                "tags": [
                    "favourites"
                ],
                "summary": "Favourites info",
                "description": "Getting a list of all favourites",
                "operationId": "favouritesIndex",
                "responses": {
                    "200": {
                        "description": "Success getting a list of all favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Favourite"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "favourites"
                ],
                "summary": "Add a new favourite",
                "description": "Adding a new favourite",
                "operationId": "favouritesStore",
                "requestBody": {
                    "description": "Pass data to add a new favourite",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "place_id"
                                ],
                                "properties": {
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "place_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new favourite",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Favourite"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "user_id": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The review id field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/favourites/{id}": {
            "get": {
                "tags": [
                    "favourites"
                ],
                "summary": "Show favourites",
                "description": "Showing favourites by user_id",
                "operationId": "favouritesShow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success showing user favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/Favourite"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Favourites not found"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "favourites"
                ],
                "summary": "Delete favourite",
                "description": "Deleting favourite",
                "operationId": "favouritesDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of favourite",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success deleting favourite",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Favourite is deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Favourite not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "messerrorage": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/places/{id}/reviewsCount": {
            "get": {
                "tags": [
                    "places"
                ],
                "summary": "Returns the number of reviews for a place",
                "description": "Returns the number of reviews for a place",
                "operationId": "reviewsCount",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success storing a new user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "reviews_count": {
                                            "type": "integer",
                                            "maxLength": 255,
                                            "example": 2
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/places/{id}/uploadImage": {
            "post": {
                "tags": [
                    "categories"
                ],
                "summary": "Updates the category picture",
                "description": "Updates the category picture",
                "operationId": "categoryUploadImage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to add a new category image",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "image": {
                                        "type": "file",
                                        "maxLength": 255,
                                        "example": "(file path)"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "image_url": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "storage/PlacesImages/236095676.png"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/places/{id}/reservation": {
            "post": {
                "tags": [
                    "reservation"
                ],
                "summary": "Returning an array of free time",
                "description": "Displays free time",
                "operationId": "availableTime",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of place",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Enter data to find out free time",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "date": {
                                        "type": "date",
                                        "example": "2021-04-19"
                                    },
                                    "people": {
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "staying": {
                                        "type": "float",
                                        "example": "0.5"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "available time array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "items": {
                                            "type": "string",
                                            "example": "10:00 AM"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "date": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The date must be a date after yesterday."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/places/{id}/reserve": {
            "post": {
                "tags": [
                    "reservation"
                ],
                "summary": "Create and return the order",
                "description": "Creates a table reservation for the selected date, time, number of people",
                "operationId": "tableReserve",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of place",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Enter data to find out free time",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "date": {
                                        "type": "date",
                                        "example": "2021-04-21"
                                    },
                                    "people": {
                                        "type": "integer",
                                        "example": "10"
                                    },
                                    "staying": {
                                        "type": "float",
                                        "example": "2"
                                    },
                                    "time": {
                                        "type": "time",
                                        "example": "17:00"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "date": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The date must be a date after yesterday."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Place not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The order has been successfully created. Status: 'In progress' ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/reviews": {
            "get": {
                "tags": [
                    "reviews"
                ],
                "summary": "Review info",
                "description": "Getting a list of all reviews",
                "operationId": "reviewsIndex",
                "responses": {
                    "200": {
                        "description": "Success getting a list of all reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Review"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "reviews"
                ],
                "summary": "Add review",
                "description": "Adding a new review",
                "operationId": "reviewStore",
                "requestBody": {
                    "description": "Pass data to add a new review",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Review"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Review"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/reviews/{id}": {
            "put": {
                "tags": [
                    "reviews"
                ],
                "summary": "Update review",
                "description": "Updating review information",
                "operationId": "reviewUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of review",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to update review information",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Review"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success updating review information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Review"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Review not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "reviews"
                ],
                "summary": "Removes review",
                "description": "Removes review",
                "operationId": "reviewsDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of review",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success deleting review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review is deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Review not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/schedules": {
            "get": {
                "tags": [
                    "schedules"
                ],
                "summary": "All schedules",
                "description": "Getting a list of all schedules",
                "operationId": "schedulesIndex",
                "responses": {
                    "200": {
                        "description": "Successfully received a list of scheduled places",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Schedule"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "schedules"
                ],
                "summary": "Adds 1 day to the schedule for a place",
                "description": "Adds 1 day to the schedule for a place",
                "operationId": "scheduleStore",
                "requestBody": {
                    "description": "Pass data to add a new schedule",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Schedule"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new schedule",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/schedules/{id}": {
            "put": {
                "tags": [
                    "schedules"
                ],
                "summary": "Update schedule",
                "description": "Updating schedule information",
                "operationId": "schedulesUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of day of the schedule",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to update user information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Schedule"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success updating category information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Review not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Users info",
                "description": "Getting a list of all users",
                "operationId": "usersIndex",
                "responses": {
                    "200": {
                        "description": "Success getting a list of all users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Add user",
                "description": "Adding a new user",
                "operationId": "usersStore",
                "requestBody": {
                    "description": "Pass data to add a new user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "second_name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Jack"
                                    },
                                    "second_name": {
                                        "type": "string",
                                        "example": "Smith"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success storing a new user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "first_name": {
                                            "type": "string",
                                            "example": "Jack"
                                        },
                                        "second_name": {
                                            "type": "string",
                                            "example": "Smith"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "user1@mail.com"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "first_name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The first name field is required."
                                                    }
                                                },
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email has already been taken."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Show user",
                "description": "Showing user by Id",
                "operationId": "usersShow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success showing user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "description": "Updating user information",
                "operationId": "usersUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Pass data to update user information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "John"
                                    },
                                    "second_name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "description": "User unique email address",
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@gmail.com"
                                    },
                                    "address_full": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Minsk"
                                    },
                                    "address_lat": {
                                        "type": "number",
                                        "example": "53.913224"
                                    },
                                    "address_lon": {
                                        "type": "number",
                                        "example": "27.467663"
                                    },
                                    "email_verified_at": {
                                        "description": "Datetime marker of verification status",
                                        "type": "string",
                                        "format": "date-time",
                                        "readOnly": true,
                                        "example": "2019-02-25 12:59:20"
                                    },
                                    "password": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Passwo424hg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success updating user information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "first_name": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "John"
                                        },
                                        "second_name": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "Doe"
                                        },
                                        "email": {
                                            "description": "User unique email address",
                                            "type": "string",
                                            "format": "email",
                                            "example": "user@gmail.com"
                                        },
                                        "address_full": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "Minsk"
                                        },
                                        "address_lat": {
                                            "type": "number",
                                            "example": "53.913224"
                                        },
                                        "address_lon": {
                                            "type": "number",
                                            "example": "27.467663"
                                        },
                                        "avatar": {
                                            "type": "string",
                                            "example": "storage/PlaceImages/KFC.png"
                                        },
                                        "email_verified_at": {
                                            "description": "Datetime marker of verification status",
                                            "type": "string",
                                            "format": "date-time",
                                            "readOnly": true,
                                            "example": "2019-02-25 12:59:20"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2021-04-15T12:37:21.000000Z"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2021-04-15T13:07:18.000000Z"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email has already been taken."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "description": "Deleting user",
                "operationId": "usersDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success deleting user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User is deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "ModelNotFoundException handled for API"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/user/details": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Show user",
                "description": "Showing auth user",
                "operationId": "usersShowProfile",
                "responses": {
                    "200": {
                        "description": "Success showing user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/users/{id}/uploadAvatar": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Upload user avatar",
                "description": "Uploading avatar for user",
                "operationId": "usersAvatar",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    },
                    {
                        "name": "avatar",
                        "in": "path",
                        "description": "Image for user",
                        "required": true,
                        "schema": {
                            "type": "file",
                            "format": "file"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success uploading avatar for user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "image_url": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "storage/UsersAvatars/236095676.png"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "object",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "image": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The image name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/user/location": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Location of user",
                "description": "Getting location of user",
                "operationId": "usersLocation",
                "requestBody": {
                    "description": "Pass data to getting location of user",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "address_full": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Minsk"
                                    },
                                    "address_lat": {
                                        "type": "number",
                                        "example": "53.913224"
                                    },
                                    "address_lon": {
                                        "type": "number",
                                        "example": "27.467663"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success getting location of user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "address_full": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "example": "Minsk"
                                        },
                                        "address_lat": {
                                            "type": "number",
                                            "example": "53.913224"
                                        },
                                        "address_lon": {
                                            "type": "number",
                                            "example": "27.467663"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "address_full": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The first name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "AppInfo": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "about": {
                        "description": "About application",
                        "type": "string",
                        "example": "Very larg text..."
                    },
                    "contact": {
                        "description": "Application contacts (Phones, Addresses)",
                        "type": "string",
                        "example": "Very larg text..."
                    },
                    "terms": {
                        "description": "Terms",
                        "type": "string",
                        "example": "Very larg text..."
                    },
                    "privacy_policy": {
                        "description": "Privacy policy",
                        "type": "string",
                        "example": "Very larg text..."
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "AppInfo"
                }
            },
            "Category": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": "1"
                    },
                    "name": {
                        "description": "Category name",
                        "type": "string",
                        "example": "Coffee"
                    },
                    "image_url": {
                        "description": "On creation and update, accepts a file, but stores and returns a link to the file on the server",
                        "type": "string",
                        "example": "storage/category/coffee.png"
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Category"
                }
            },
            "Comment": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "title": {
                        "description": "Comment title",
                        "type": "string",
                        "example": "It lie!!"
                    },
                    "description": {
                        "description": "The main text of the comment",
                        "type": "string",
                        "example": "All food in this place was bad! -_-"
                    },
                    "review_id": {
                        "description": "ID of the review to which the comment applies",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "user ID who left the comment",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Comment"
                }
            },
            "Favourite": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "user_id": {
                        "description": "user ID",
                        "type": "integer",
                        "example": 1
                    },
                    "place_id": {
                        "description": "go to the place that the user likes",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Favourite"
                }
            },
            "Order": {
                "required": [
                    "status",
                    "price",
                    "date",
                    "people",
                    "staying",
                    "time",
                    "staying_end",
                    "user_id",
                    "place_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "example": [
                            "In Progress",
                            "Rejected",
                            "Confirmed"
                        ]
                    },
                    "price": {
                        "type": "number",
                        "example": 2000
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2021-04-21"
                    },
                    "people": {
                        "type": "number",
                        "example": 10
                    },
                    "staying": {
                        "type": "integer",
                        "example": 2
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "17:00"
                    },
                    "staying_end": {
                        "type": "string",
                        "format": "time",
                        "example": "19:00"
                    },
                    "user_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "place_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Order"
                }
            },
            "Place": {
                "required": [
                    "name",
                    "type",
                    "phone",
                    "capacity",
                    "table_price",
                    "description",
                    "image_url"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "KFC"
                    },
                    "image_url": {
                        "type": "string",
                        "example": "storage\\PlaceImages\\KFC.png"
                    },
                    "rating": {
                        "type": "number",
                        "example": 4.23
                    },
                    "address_full": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "Minsk"
                    },
                    "address_lat": {
                        "type": "number",
                        "example": 53.913224
                    },
                    "address_lon": {
                        "type": "number",
                        "example": 27.467663
                    },
                    "phone": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "+375448675643"
                    },
                    "description": {
                        "type": "string",
                        "example": "KFC (short for Kentucky Fried Chicken) is an American fast food restaurant."
                    },
                    "capacity": {
                        "type": "integer",
                        "example": 45
                    },
                    "table_price": {
                        "type": "number",
                        "example": 44.99
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Place"
                }
            },
            "Product": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "description": "Product name",
                        "type": "string",
                        "example": "Americano"
                    },
                    "weight": {
                        "description": "Product weight",
                        "type": "string",
                        "example": "200ml"
                    },
                    "price": {
                        "description": "Product price",
                        "type": "number",
                        "example": 4
                    },
                    "image_url": {
                        "description": "On creation and update, accepts a file, but stores and returns a link to the file on the server",
                        "type": "string",
                        "example": "storage/products/coffe_americano.png"
                    },
                    "category_id": {
                        "description": "ID of the category the product belongs to",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Product"
                }
            },
            "ProductsOfPlace": {
                "required": [
                    "product_id",
                    "place_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "place_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ProductsOfPlace"
                }
            },
            "Review": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "title": {
                        "description": "Review title",
                        "type": "string",
                        "example": "Gread place!!!"
                    },
                    "rating": {
                        "description": "User rating",
                        "type": "number",
                        "example": 5
                    },
                    "description": {
                        "description": "The main text of the review",
                        "type": "string",
                        "example": "Very cool restaurant, I liked everything"
                    },
                    "like": {
                        "description": "The number of likes under the review from other users",
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "user_id": {
                        "description": "User ID of the user who left the review",
                        "type": "integer",
                        "example": 1
                    },
                    "place_id": {
                        "description": "Id of the place for which the review is left",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Review"
                }
            },
            "Schedule": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "place_id": {
                        "description": "Id of the place to which the schedule belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "work_start": {
                        "description": "Start time",
                        "type": "string",
                        "format": "time",
                        "example": "8:00"
                    },
                    "work_end": {
                        "description": "End time",
                        "type": "string",
                        "format": "time",
                        "example": "19:00"
                    },
                    "lunch_start": {
                        "description": "lunch start timee",
                        "type": "string",
                        "format": "time",
                        "example": "12:00"
                    },
                    "lunch_end": {
                        "description": "lunch end time",
                        "type": "string",
                        "format": "time",
                        "example": "13:00"
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Schedule"
                }
            },
            "User": {
                "required": [
                    "first_name",
                    "second_name",
                    "email",
                    "password"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": "1"
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "John"
                    },
                    "second_name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "Doe"
                    },
                    "email": {
                        "description": "User unique email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@gmail.com"
                    },
                    "address_full": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "Minsk"
                    },
                    "address_lat": {
                        "type": "number",
                        "example": "53.913224"
                    },
                    "address_lon": {
                        "type": "number",
                        "example": "27.467663"
                    },
                    "avatar": {
                        "type": "string",
                        "example": "storage/UserImages/anton.png"
                    },
                    "email_verified_at": {
                        "description": "Datetime marker of verification status",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2019-02-25 12:59:20"
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "User"
                }
            }
        },
        "securitySchemes": {
            "api_key": {
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
            }
        }
    }
}